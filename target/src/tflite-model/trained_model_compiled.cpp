/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 13.03.2023 03:57:46

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 13040;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,5960 } };
const TfArray<1, float> quant0_scale = { 1, { 0.003553921589627862, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 149, 40, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 149, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 75, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 75, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 608, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data6[8*1*3*40] = { 
  /* [0][0][][] */ 28,79,21,88,69,4,58,54,44,-34,-11,34,-31,35,-30,-65,-22,-10,-24,-32,-54,16,-17,19,54,52,-61,8,14,-30,-30,6,-46,-21,50,30,-60,-46,-10,-56, 127,76,105,5,23,99,101,-36,18,-11,44,-6,-55,-46,-29,30,-18,-31,7,-21,-51,-31,25,-28,-13,-66,-63,-16,23,13,-28,39,38,-21,-32,-34,-28,-6,-41,-28, 63,-16,3,54,53,56,78,36,-17,-39,-52,-32,-46,-8,-27,-16,-61,-45,-37,47,25,20,8,-54,10,22,-55,-38,-20,38,-55,-20,15,-19,-32,-7,51,27,40,-23, 
  /* [1][0][][] */ -85,-69,-88,-68,6,-2,2,-13,-8,49,40,-15,78,58,31,80,36,62,56,33,-14,31,-19,-24,44,36,7,14,-25,51,-11,-57,-45,-66,-60,-89,-52,-65,-58,-69, -87,-31,-42,-27,-5,47,53,-16,53,66,20,50,-11,5,30,6,29,89,23,32,34,51,51,33,50,23,-4,-21,-9,22,-25,11,-23,-22,-54,-17,-89,-33,-23,-31, -127,-75,-65,-4,31,-52,-15,-23,28,35,23,13,77,69,12,83,41,18,13,-4,6,-29,-31,16,4,18,37,-26,34,7,-40,-14,-11,-19,-46,-48,-25,-34,-41,-89, 
  /* [2][0][][] */ -15,-92,-79,81,-113,-97,-114,70,-59,-71,-5,92,46,10,-59,-117,20,-6,-29,63,-56,-5,-37,48,-55,-52,-20,-110,-98,-38,-97,-5,50,-96,-31,57,-5,-50,13,-29, -83,-95,-70,34,-42,73,-48,-102,-45,-80,54,-78,38,-46,20,-73,45,-49,-86,24,-50,-65,-78,-14,-15,3,-87,71,6,-33,-30,9,-7,-48,-10,-76,91,47,-46,-20, -104,-99,85,-19,70,-68,95,35,-56,-116,12,-50,32,56,-4,-69,-87,5,-47,-39,78,-67,-49,-25,-82,-18,65,28,-79,-110,-49,5,70,-30,-11,61,6,-92,70,-127, 
  /* [3][0][][] */ -112,58,-17,127,87,-126,-75,43,0,45,13,1,24,95,68,-52,48,27,-83,-67,-10,70,78,-52,39,-19,-40,-36,-49,13,-4,5,-1,-33,-36,22,-12,79,-2,-43, 9,-22,-16,-60,108,86,74,20,15,54,-69,33,-7,-28,-53,94,38,61,-9,-93,-4,49,56,-79,-45,-25,-41,-21,3,-7,32,-60,-66,35,-3,19,-32,-38,71,-43, 3,-79,33,-23,60,-10,54,25,42,-20,8,48,93,35,36,-67,87,82,32,36,-11,-43,-71,-91,-83,-40,-100,35,-56,-41,-71,-71,-44,42,30,67,-39,17,59,68, 
  /* [4][0][][] */ -1,30,-71,72,95,-54,19,6,-102,16,18,61,-8,21,-14,-93,11,-75,-39,-64,-6,-36,-27,-108,9,26,-23,-63,77,-86,-41,-127,13,-89,-121,-127,32,46,-98,15, -90,26,-52,-10,26,14,-98,-83,-15,-9,-2,-97,-97,-65,-96,-63,62,-74,-83,48,-29,-100,-95,68,60,106,-45,69,58,41,84,48,-79,-28,92,1,29,-121,9,-39, -88,-75,38,11,24,-70,-103,-64,10,15,32,-83,30,-28,-69,-106,-106,-41,-20,1,3,-61,46,-99,119,-43,30,89,86,-57,-85,-42,-13,-21,29,67,18,9,17,45, 
  /* [5][0][][] */ 8,-31,-25,37,21,-14,-20,-54,44,-44,-27,-4,53,-16,-44,-6,35,60,-47,22,8,26,40,-1,10,-31,70,-8,-7,27,37,1,-55,-5,-27,35,3,-16,-31,-22, -34,-114,-127,65,76,74,52,33,8,56,-22,-44,-59,-11,-36,-28,58,-41,45,-58,0,-50,-24,-28,8,23,48,56,-16,62,12,19,-12,22,15,12,-64,51,7,3, -71,-68,-94,-41,20,5,59,47,52,-17,-40,42,47,22,10,37,24,-6,15,-9,-12,-18,-6,-20,32,56,45,14,47,51,-38,-59,-58,-50,41,-59,-32,-5,-12,41, 
  /* [6][0][][] */ 99,85,70,23,32,85,127,68,18,23,2,27,-28,-36,-4,-10,40,-31,8,-53,-42,-18,-21,-6,-17,-54,-73,-39,37,-45,-61,-74,-49,-4,-6,24,12,-35,-50,21, 100,45,56,98,17,69,43,-2,10,-25,6,0,-55,-31,-55,-1,-14,-26,-49,11,-26,-4,13,-14,-35,-56,-71,-35,21,-18,-3,-55,-52,-61,3,25,33,42,-5,39, 22,39,27,-39,-23,3,46,23,21,-5,-18,-25,-70,-41,-37,-39,-35,-41,-10,0,10,-26,-32,-16,-29,-48,-10,1,43,-15,-1,-41,-16,-1,46,41,27,-22,10,28, 
  /* [7][0][][] */ -59,-127,-106,5,25,-57,-35,-43,-2,45,-66,-51,-67,17,-22,-15,-67,-6,25,-67,73,12,-6,65,108,73,26,36,96,82,20,4,75,-9,15,-29,-7,-59,20,44, 23,-60,-69,42,-79,-17,17,-20,41,-15,-29,-32,-115,-92,-7,-101,9,-27,-13,-67,13,-25,-1,-58,97,62,82,42,84,50,50,-6,3,41,-47,-58,-100,34,23,-49, -16,-71,-67,23,75,42,75,10,-44,10,-95,-33,-36,-5,-48,7,35,10,-32,-27,45,60,-71,-53,-27,-5,32,50,-29,2,-57,-74,-68,-27,-18,1,-91,-61,-14,15, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,40 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0036281011998653412, 0.004163642879575491, 0.0019109027925878763, 0.0029973445925861597, 0.0021385587751865387, 0.0036729613784700632, 0.0053609525784850121, 0.0033069322817027569, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { 55, -5102, -7877, -3876, -2813, -9948, -474, -5852, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 1.2893987332063261e-05, 1.4797260519117117e-05, 6.7911987571278587e-06, 1.065232754626777e-05, 7.6002702371624764e-06, 1.3053416296315845e-05, 1.9052404240937904e-05, 1.1752577847801149e-05, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ 33,-71,-30,53,-2,-42,127,-8, 117,-70,-48,-8,-2,-48,116,9, 95,-56,36,48,25,76,110,52, 
  /* [1][0][][] */ 18,-29,-56,-58,1,-23,127,101, 2,-58,-33,7,-40,41,61,34, 99,-22,10,55,33,-6,26,38, 
  /* [2][0][][] */ 12,-27,-38,-31,3,40,53,-17, 120,-40,-16,53,10,-25,105,88, 55,-63,-23,-42,8,17,127,35, 
  /* [3][0][][] */ 29,-60,-4,-14,-15,41,30,111, 84,-71,2,56,36,47,127,21, 73,-92,13,1,-24,37,103,33, 
  /* [4][0][][] */ 77,-60,33,-17,26,-34,102,119, -5,-64,8,-13,-18,-33,127,54, 112,-55,28,71,-21,90,29,88, 
  /* [5][0][][] */ 127,-74,-77,49,41,46,127,103, 38,-91,-59,53,24,42,94,-2, 53,-65,15,-2,37,-32,32,65, 
  /* [6][0][][] */ 127,-46,16,57,11,23,111,124, 109,-47,10,-62,1,57,100,7, 55,-23,-12,-35,35,-54,65,62, 
  /* [7][0][][] */ 68,-79,43,0,-22,53,99,61, 127,-85,-46,32,55,33,99,-21, 40,-99,-42,22,30,4,43,89, 
  /* [8][0][][] */ 23,-65,20,-8,5,-8,111,101, 68,-41,-42,69,54,48,125,45, 56,-55,6,-40,22,-24,127,52, 
  /* [9][0][][] */ 50,-43,3,-16,25,32,14,35, 81,-11,33,-46,10,19,127,11, 33,-22,22,1,6,-13,111,79, 
  /* [10][0][][] */ 56,-46,14,14,21,-31,66,86, 101,-40,0,43,59,46,127,4, 51,-43,-9,-38,19,-3,116,74, 
  /* [11][0][][] */ 73,-67,-9,56,36,-22,103,58, 69,-49,18,-1,0,-1,62,85, 89,-50,-35,57,67,-16,127,37, 
  /* [12][0][][] */ 121,-25,-43,-32,17,35,127,4, 48,-23,29,-31,26,-28,93,98, 43,-9,-28,-42,-3,46,39,102, 
  /* [13][0][][] */ -29,8,-84,45,-102,-110,-10,-83, -97,-59,45,-76,68,-34,-107,-78, -48,-127,-70,36,-15,16,92,-60, 
  /* [14][0][][] */ 114,-48,40,19,-59,61,83,10, 127,-40,-39,-9,53,-33,74,24, 33,-27,26,-64,-6,11,65,33, 
  /* [15][0][][] */ 84,-42,-9,40,-5,-29,70,54, 69,-37,-2,-28,32,40,127,11, 66,-46,18,-43,-1,18,64,50, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0062078698538243771, 0.0053162099793553352, 0.0065473406575620174, 0.0054026045836508274, 0.0056874966248869896, 0.0041624675504863262, 0.0051051704213023186, 0.0047494396567344666, 0.0073428056202828884, 0.0072398539632558823, 0.0086162276566028595, 0.0077390926890075207, 0.0072822738438844681, 0.0022661974653601646, 0.0046289488673210144, 0.0090277111157774925, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[16] = { -275, -175, -113, -284, -221, -291, -371, -246, -283, -50, -190, -340, -73, -5023, -176, -203, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 4.8893496568780392e-05, 4.1870738641591743e-05, 5.1567185437306762e-05, 4.2551186197670177e-05, 4.4795011490350589e-05, 3.2783806091174483e-05, 4.020858250441961e-05, 3.7406825867947191e-05, 5.7832308812066913e-05, 5.7021457905648276e-05, 6.7861845309380442e-05, 6.0953487263759598e-05, 5.7355558965355158e-05, 1.7848686184152029e-05, 3.6457837268244475e-05, 7.1102709625847638e-05, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[2*608] = { 
  -48, -26, -30, -27, -42, -24, -17, 4, -55, -22, -89, -75, -54, 2, -11, -67, -23, -23, -26, -25, -41, 6, -22, -15, -74, -42, -85, -113, -32, 12, -15, -47, -38, -13, -30, -24, -53, -28, -4, -5, -107, -8, -87, -89, -38, -22, 10, -43, -34, -39, -12, -7, -32, -2, -28, -13, -70, -34, -83, -107, -17, -10, -11, -48, -55, -23, -31, -25, -37, -20, -23, 8, -89, -30, -127, -92, -42, 8, -19, -75, -10, -11, 11, -11, -47, -12, 5, -17, -12, -11, -31, -20, -30, 5, -6, -7, 11, 1, 17, 3, -27, -17, 22, -12, -9, 23, 6, -20, 17, -3, -3, 24, -26, -9, -10, 10, -50, -21, -18, -18, -65, -13, -83, -80, 0, -2, 16, -47, -60, -27, -13, -1, -63, -10, 1, 8, -28, -6, -43, -55, -8, 10, 2, -33, -43, -29, 1, 1, -50, -6, -23, -7, -49, -14, -34, 5, -19, 1, 6, -57, -23, -7, -18, -5, -26, -16, -26, 3, -45, -11, 0, -14, -11, 10, 11, -25, -20, 1, -18, -9, -56, -10, -5, -17, -71, 8, -59, -47, -29, -4, -4, -49, -42, -22, -42, -31, -33, -8, -13, -15, -52, -33, -79, -75, -30, 0, -31, -57, -15, -32, -26, -4, -47, -26, -31, -8, -113, -23, -97, -73, -44, 10, -18, -52, -31, -51, -18, -8, -39, 1, -11, -18, -89, -2, -83, -90, -22, -24, -6, -48, -43, -24, -26, -4, -50, -2, -27, -25, -80, 3, -70, -101, -34, 7, -13, -56, -7, -33, -21, -6, -44, 1, -16, -32, -95, -21, -101, -97, -29, -24, -3, -54, -32, -2, -26, 0, -46, 4, -4, 3, -70, 2, -74, -74, -26, -5, -9, -59, -11, -11, 8, 1, -38, 0, -23, -11, -40, 14, -26, -17, 2, -18, -9, 30, -35, 15, -25, -21, -30, -6, 13, -7, -32, -6, -29, -45, 26, 11, -20, -16, -35, 10, -13, -5, -30, -21, -12, 1, -42, -4, -57, -68, -6, 7, -17, -39, -47, -12, -18, 8, -50, 7, -5, -1, -60, -28, -90, -35, -21, -16, -4, -26, -23, -8, 13, -23, -49, -21, -29, -22, -30, 4, -24, -37, -21, -6, -3, -22, -22, -28, -7, -2, -40, -11, 7, -24, -19, -13, -53, -64, 16, -14, 12, -20, -38, -15, -23, -5, -10, -4, -18, -27, -70, -9, -85, -91, -4, 11, -20, -38, -29, 0, -11, -9, -38, -3, -27, -18, -55, -24, -102, -91, -24, -3, -12, -75, -41, -23, -49, -25, -34, -20, -28, -5, -84, -32, -88, -59, -22, 6, -19, -60, -13, -7, -20, -11, -35, -11, -31, 8, -73, -21, -102, -76, -16, -18, -19, -33, -47, -25, -17, -17, -44, 9, -27, -7, -69, -33, -102, -93, -14, -7, -5, -51, -39, -6, -11, 7, -57, -1, 3, -12, -36, -26, -92, -91, -44, 4, -28, -44, -23, -10, 9, -16, -23, 9, -18, -10, -38, 2, -13, -56, -2, 5, -7, -2, -38, -30, 4, -12, -23, -3, -15, -13, -24, -11, -34, -53, 8, 7, -5, -7, -23, 0, -2, 7, -33, -8, -11, 4, -67, -16, -79, -74, -6, -3, 13, -12, -50, -30, -8, -1, -54, -17, -23, 1, -54, -6, -71, -96, 13, -14, -10, -20, -39, -14, -33, -28, -76, -22, -22, -10, -43, -10, -48, -85, 1, -12, -19, -43, -33, -24, -26, -31, -46, -25, -12, -3, -39, -13, -35, -53, 18, 7, 2, -6, -39, -4, -24, -10, -8, 9, -29, -11, -50, 16, -56, -71, 27, -16, -9, -40, -41, 6, -2, -8, 2, -21, -3, -21, -7, 13, -64, -10, 26, 7, -13, -64, 
  53, -6, 27, 26, 57, 21, 33, 6, 59, 28, 90, 80, 53, -1, 5, 49, 36, 12, 46, 27, 33, -1, 12, 9, 50, 33, 115, 102, 36, -4, 21, 68, 36, 17, 33, 10, 54, 9, 15, -1, 89, 21, 94, 112, 27, 6, 3, 51, 46, 41, 23, 22, 34, 1, 22, 29, 81, 12, 101, 105, 18, -15, 13, 58, 45, 33, 25, -8, 35, 5, 36, 5, 87, 4, 114, 94, 34, 0, 5, 67, -5, 18, 9, -3, 36, 2, 17, 8, -4, -12, 29, -3, 23, 2, 9, 8, -1, 19, 11, 0, 25, 16, 2, 10, 26, -18, -7, 23, -38, -5, 8, -24, 33, -3, 13, -13, 39, -5, 18, 27, 80, 14, 88, 95, -6, -8, -8, 45, 58, 26, 18, 19, 73, 1, -3, 2, 54, 6, 61, 65, 7, 8, -1, 33, 46, 12, 12, 23, 65, -1, 22, -2, 68, 21, 52, 1, 30, -8, 7, 31, 22, 19, 38, 17, 36, 11, 25, 17, 17, -10, 19, 4, -16, 1, 16, 10, 36, 15, 19, 23, 30, 2, 23, 19, 41, 15, 61, 58, 25, 11, -6, 49, 42, 23, 28, 14, 57, -2, 17, 9, 75, 21, 84, 86, 38, 1, 33, 71, 39, 19, 43, -1, 40, 10, 33, 12, 85, 31, 89, 63, 53, -15, 7, 53, 41, 49, 31, 24, 68, 20, 16, 6, 92, 23, 81, 79, 27, -2, 26, 65, 28, 29, 36, 24, 35, 3, 6, 24, 79, 19, 78, 84, 36, -4, 19, 48, 35, 37, 45, 16, 36, 30, 33, 24, 83, 24, 73, 88, 33, 11, 22, 55, 36, 2, -1, -4, 19, -6, 21, -1, 48, -7, 83, 65, 20, -7, 11, 55, 17, 10, -1, 3, 15, -12, 9, 18, 22, -8, 58, 23, 1, -6, 7, -4, 9, -7, 22, 0, 21, -2, 15, -3, 24, -9, 43, 42, 3, -8, -13, 21, 25, 22, 7, -3, 40, 22, -10, 15, 27, -6, 52, 54, 6, 15, -5, 35, 45, -3, 10, 11, 38, 6, 1, 17, 49, 9, 109, 69, 21, -9, -11, 21, 45, 34, -3, 3, 39, 21, 20, 21, 21, -2, 40, 50, 3, 15, 18, 22, 45, -4, 4, -7, 37, 6, -1, 24, 25, -2, 49, 67, -14, -9, 15, 29, 40, 17, 37, 8, 18, 29, 17, 23, 97, 3, 90, 109, 31, -4, 24, 60, 59, 19, 25, 23, 34, -8, 24, 18, 58, 19, 118, 62, 26, 16, 34, 65, 27, 32, 49, 4, 45, 5, 17, 28, 74, 14, 106, 41, 40, 2, 7, 49, 24, -1, 16, 21, 36, -6, 25, 23, 60, 26, 97, 50, 1, -2, -7, 36, 46, 22, 12, -9, 39, 14, 4, 21, 66, 18, 109, 83, 40, 24, 14, 72, 39, 3, 31, 4, 51, 7, 22, 4, 48, -2, 88, 84, 25, 7, 6, 56, -6, 38, 18, -12, 12, -10, -9, 19, 22, 3, -8, 39, 22, -9, -2, 13, 24, 0, 10, -11, 28, 6, -9, 1, 20, -20, 39, 60, 12, -9, 11, -6, 37, 10, 4, 5, 17, 13, 24, 18, 70, 0, 90, 62, -13, -7, 8, 26, 64, 22, 2, -1, 71, 18, 19, -2, 75, 10, 73, 65, 5, 5, -15, 49, 47, 31, 2, 19, 47, 16, 24, -1, 70, 15, 70, 76, 16, -1, 8, 47, 25, 8, 29, 10, 40, 7, 9, 19, 35, 17, 32, 79, -12, 6, 24, 3, 25, 18, 29, 22, 29, 23, -1, 5, 42, 11, 48, 44, 2, 10, 5, 51, 62, 10, -16, 9, 2, 26, 5, 22, 32, 5, 59, 30, -11, 14, 22, 56, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 2,608 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0057644802145659924, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int32_t tensor_data11[2] = { 7575, -7575, };
const TfArray<1, int> tensor_dimension11 = { 1, { 2 } };
const TfArray<1, float> quant11_scale = { 1, { 0.00016610685270279646, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,149,40 } };
const TfArray<1, float> quant12_scale = { 1, { 0.003553921589627862, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,149,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.0078760506585240364, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,149,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.0078760506585240364, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,75,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.0078760506585240364, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,75,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.0078760506585240364, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,75,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.028815582394599915, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,75,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.028815582394599915, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,38,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.028815582394599915, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,608 } };
const TfArray<1, float> quant20_scale = { 1, { 0.028815582394599915, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,2 } };
const TfArray<1, float> quant21_scale = { 1, { 1.1105265617370605, } };
const TfArray<1, int> quant21_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,2 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,9 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,10,11 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5968, (TfLiteIntArray*)&tensor_dimension0, 5960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 1216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 5960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5968, (TfLiteIntArray*)&tensor_dimension13, 1192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 1192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1200, (TfLiteIntArray*)&tensor_dimension15, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1200, (TfLiteIntArray*)&tensor_dimension17, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1200, (TfLiteIntArray*)&tensor_dimension19, 608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 608, (TfLiteIntArray*)&tensor_dimension21, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
